// üìÅ src/pages/map/MapPage.jsx
import KakaoMap from '@/pages/map/components/KakaoMap';
import SearchBox from '@/components/SearchBox';
import DetailList from '@/pages/map/components/DetailList';
import DetailPreview from '@/pages/map/components/DetailPreview';
import { useEffect } from 'react';
import { useMapController } from '@/pages/map/hook/useMapController';
import { getScore } from '@/services/ScoreService';
import { useGPT } from '@/hook/useGPT';
import { useRecoilValue, useRecoilState } from "recoil";
import { authState } from "@/atoms/authState.js";
import { analysisState } from "@/atoms/analysisState.js";
import '@/styles/Map.css';
import { useLocation } from 'react-router-dom'; // <-- Ïù¥ Ï§ÑÏùÄ Í∑∏ÎåÄÎ°ú ÌïÑÏöîÌï©ÎãàÎã§.

const MapPage = () => {
  const {
    address, setAddress,
    coords, setCoords,
    showList, setShowList,
    isDrag, setIsDrag,
    category, setCategory
  } = useMapController();

  const { isLoggedIn, user } = useRecoilValue(authState);
  const [analysis, setAnalysis] = useRecoilState(analysisState);
  const location = useLocation(); // <-- Ïù¥ Ï§ÑÏùÄ Í∑∏ÎåÄÎ°ú ÌïÑÏöîÌï©ÎãàÎã§.

  const { gpt: fetchedGpt, loading: gptLoading } = useGPT({
    address: analysis.address,
    score: analysis.score,
    preload: analysis.gpt
  });

  // CustomCardÏóêÏÑú Ï†ÑÎã¨Î∞õÏùÄ Ï£ºÏÜåÎ°ú Ï¥àÍ∏∞ Í≤ÄÏÉâÏùÑ ÏàòÌñâÌïòÎäî useEffect
  useEffect(() => {
    // location.state.addressÎ•º ÌôïÏù∏Ìï©ÎãàÎã§.
    if (location.state?.address) {
      const initialAddressFromState = location.state.address;
      // SearchBoxÏùò initialSearchValue propÏúºÎ°ú Ï†ÑÎã¨Îê† Í≤ÉÏù¥ÎØÄÎ°ú, Ïó¨Í∏∞ÏÑúÎäî ÏßÅÏ†ë address ÏÉÅÌÉúÎ•º ÏÑ§Ï†ïÌïòÏßÄ ÏïäÏäµÎãàÎã§.
      // SearchBox ÎÇ¥Î∂ÄÏóêÏÑú initialSearchValueÎ•º Í∞êÏßÄÌïòÏó¨ Í≤ÄÏÉâÏùÑ Ìä∏Î¶¨Í±∞Ìï† Í≤ÉÏûÖÎãàÎã§.
    }
  }, [location.state?.address]); // location.state.addressÍ∞Ä Î≥ÄÍ≤ΩÎê† ÎïåÎßàÎã§ Ïã§Ìñâ

  // Ï≤´ Î≤àÏß∏ useEffect: Ï£ºÏÜå ÎòêÎäî Ï¢åÌëúÍ∞Ä Î≥ÄÍ≤ΩÎê† Îïå Ï†êÏàòÎ•º Í∞ÄÏ†∏Ïò§Í≥† analysisStateÎ•º ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    // Ï¥àÍ∏∞ Î°úÎìú Ïãú location.state.addressÍ∞Ä ÏûàÎã§Î©¥, Ìï¥Îãπ Ï£ºÏÜåÎ°ú Í∞ïÏ†ú ÏÑ§Ï†ïÌï©ÎãàÎã§.
    const currentAddressToUse = location.state?.address || address;

    if (analysis.address === currentAddressToUse && analysis.score && analysis.coords === coords) {
      return;
    }

    if (!coords?.lat || !coords?.lng || !currentAddressToUse) {
        setAnalysis({ score: null, gpt: '', address: '', coords: null });
        return;
    }

    const fetchData = async () => {
      setAnalysis(prev => ({ ...prev, score: null, gpt: '' }));
      const result = await getScore(coords.lat, coords.lng);
      setAnalysis(prev => ({
        ...prev,
        score: result,
        address: currentAddressToUse, // ÌòÑÏû¨ ÏÇ¨Ïö©ÎêòÎäî Ï£ºÏÜåÎ°ú ÏóÖÎç∞Ïù¥Ìä∏
        coords: coords,
      }));
    };

    fetchData();
  }, [address, coords, location.state?.address]); // dependency arrayÏóê location.state.address Ï∂îÍ∞Ä

  // Îëê Î≤àÏß∏ useEffect: useGPT ÌõÖÏóêÏÑú Î∞òÌôòÎêú GPT ÏùëÎãµÏù¥ Î≥ÄÍ≤ΩÎê† Îïå analysisStateÏùò gptÎ•º ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    if (fetchedGpt && fetchedGpt !== analysis.gpt && !gptLoading) {
      setAnalysis(prev => ({ ...prev, gpt: fetchedGpt }));
    }
  }, [fetchedGpt, gptLoading, analysis.gpt, setAnalysis]);

  return (
    <div className="mapbackground">
      <KakaoMap
        address={address}
        coords={coords}
        category={category}
        onDragStart={() => setIsDrag(true)}
        onDragEnd={() => setIsDrag(false)}
        setCoords={setCoords}
      />

      <div className="search-position">
        <SearchBox
          defaultValue={address}
          // CustomCardÏóêÏÑú ÎÑòÏñ¥Ïò® Ï£ºÏÜåÍ∞Ä ÏûàÎã§Î©¥ Í∑∏ Ï£ºÏÜåÎ•º SearchBoxÏùò initialSearchValueÎ°ú Ï†ÑÎã¨Ìï©ÎãàÎã§.
          initialSearchValue={location.state?.address} // <-- Ïù¥ Ï§ÑÏùÑ ÏàòÏ†ïÌï©ÎãàÎã§.
          onSearch={(newAddress, newCoords) => {
            setAddress(newAddress);
            setCoords(newCoords);
          }}
          user_id={isLoggedIn ? user?.user_id : null}
        />
      </div>

      {!showList && (
        <button className="toggle-list-button" onClick={() => setShowList(true)}>
          Ìï≠Î™©<br />Î≥¥Í∏∞
        </button>
      )}
      {showList && (
        <div className="list-box">
          <DetailList
            isDrag={isDrag}
            onClose={() => setShowList(false)}
            category={category}
            setCategory={setCategory}
          />
        </div>
      )}

      <div className="preview-box">
        <DetailPreview
          isDrag={isDrag}
          address={address}
          coords={coords}
          score={analysis.score}
          gpt={analysis.gpt}
        />
      </div>
    </div>
  );
};

export default MapPage;